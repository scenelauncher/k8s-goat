name: Deploy to Amazon EKS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-1  # Change this to your desired AWS region

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
        
      - name: Set environment variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_PREFIX=${{ secrets.ECR_REPOSITORY_PREFIX || 'k8s-goat' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV
      
      - name: Build, tag, and push images to Amazon ECR
        run: |
          # Get all directories in infrastructure folder
          cd infrastructure
          services=$(find . -maxdepth 1 -type d | grep -v "^\.$" | sed 's/\.\///')
          
          for service in $services; do
            # Skip if no Dockerfile exists
            if [ ! -f "$service/Dockerfile" ]; then
              echo "Skipping $service - no Dockerfile found"
              continue
            fi
            
            # Create ECR repository if it doesn't exist
            aws ecr describe-repositories --repository-names "${ECR_REPOSITORY_PREFIX}-$service" || \
              aws ecr create-repository --repository-name "${ECR_REPOSITORY_PREFIX}-$service"
            
            # Build and push Docker image
            echo "Building and pushing image for $service"
            docker build -t $ECR_REGISTRY/${ECR_REPOSITORY_PREFIX}-$service:$IMAGE_TAG -t $ECR_REGISTRY/${ECR_REPOSITORY_PREFIX}-$service:latest $service
            docker push $ECR_REGISTRY/${ECR_REPOSITORY_PREFIX}-$service:$IMAGE_TAG
            docker push $ECR_REGISTRY/${ECR_REPOSITORY_PREFIX}-$service:latest
            
            echo "${ECR_REPOSITORY_PREFIX}-$service=$ECR_REGISTRY/${ECR_REPOSITORY_PREFIX}-$service:$IMAGE_TAG" >> $GITHUB_WORKSPACE/image-map.txt
          done
      
      - name: Update Kubernetes manifests
        run: |
          # Create temp directory for modified manifests
          mkdir -p temp-manifests
          
          # Process all deployment YAML files in scenarios
          for file in $(find scenarios -name "deployment.yaml" -o -name "*.deployment.yaml"); do
            echo "Processing $file"
            cp "$file" "temp-manifests/$(basename "$file")"
            
            # Read image mapping file and update manifests
            while IFS= read -r line; do
              service=$(echo $line | cut -d= -f1)
              image=$(echo $line | cut -d= -f2)
              service_name=$(echo $service | sed "s/${ECR_REPOSITORY_PREFIX}-//")
              
              # Replace madhuakula/[service-name] with the ECR image
              sed -i "s|madhuakula/${service_name}:[^\"]*|${image}|g" "temp-manifests/$(basename "$file")"
              sed -i "s|madhuakula/${service_name}$|${image}|g" "temp-manifests/$(basename "$file")"
            done < $GITHUB_WORKSPACE/image-map.txt
          done
          
      - name: Deploy to EKS
        run: |
          # Apply the modified manifests to EKS
          for file in temp-manifests/*.yaml; do
            echo "Deploying $file"
            kubectl apply -f "$file"
          done
          
          # Apply the original manifests that don't need modifications
          echo "Deploying remaining Kubernetes resources"
          kubectl apply -f scenarios/batch-check/job.yaml
          kubectl apply -f scenarios/build-code/job.yaml
          kubectl apply -f scenarios/hunger-check/job.yaml
          kubectl apply -f scenarios/internal-proxy/ingress.yaml
          kubectl apply -f scenarios/kubernetes-goat-home/ingress.yaml
          kubectl apply -f scenarios/kubernetes-goat-home/service.yaml
          kubectl apply -f scenarios/system-monitor/service.yaml
          kubectl apply -f scenarios/hungry-helmsman/manifest.yaml
          
      - name: Verify deployment
        run: |
          kubectl get deployments
          kubectl get pods
          echo "Deployment completed successfully"

